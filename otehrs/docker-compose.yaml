version: "3"

# Common configuration for Airflow services
x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.1.1}  # Airflow image
  environment: &airflow-common-env
    # Environment variables for Airflow configuration
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'  # Enable XCom pickling
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor  # Use CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow  # Database connection string
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow  # Celery result backend
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0  # Redis broker URL
    AIRFLOW__CORE__FERNET_KEY: ""  # Fernet key for encryption (empty here)
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"  # Pause DAGs on creation
    AIRFLOW__CORE__LOAD_EXAMPLES: "true"  # Load default example DAGs
    AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"  # API authentication backend
    AIRFLOW__SMTP__SMTP_HOST: "smtp.gmail.com"  # SMTP host for email notifications
    AIRFLOW__SMTP__SMTP_PORT: 587  # SMTP port
    AIRFLOW__SMTP__SMTP_USER: "de.airflow@gmail.com"  # SMTP user
    AIRFLOW__SMTP__SMTP_PASSWORD: "cfsrvkongsobheta"  # SMTP password
    AIRFLOW__SMTP__SMTP_MAIL_FROM: "de.airflow@gmail.com"  # Sender email

  volumes:
    # Mount points for DAGs, logs, and plugins
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    # Bind mounts for additional data
    - type: bind
      source: ./clean_data
      target: /app/clean_data
    - type: bind
      source: ./raw_files
      target: /app/raw_files
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"  # User ID and Group ID
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

# Definition of services
services:
  # PostgreSQL database service
  postgres:
    image: postgres:13  # Use PostgreSQL 13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data  # Persistent volume for database
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  # Redis service for message brokering
  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  # Airflow webserver service
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080  # Expose webserver on port 8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  # Airflow scheduler service
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  # Airflow worker service
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  # Airflow initialization service
  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"  # Upgrade DB on start
      _AIRFLOW_WWW_USER_CREATE: "true"  # Create a webserver user
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}  # Default username
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}  # Default password

  # Flower service for monitoring Celery
  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555  # Expose Flower on port 5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

# Definition of volumes
volumes:
  postgres-db-volume:  # Named volume for PostgreSQL data persistence
